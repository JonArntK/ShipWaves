#pragma kernel ComputeWaterSurfaceKernel

#include "ComputeElevationGlobal.hlsl"
#include "GenerateMesh.hlsl"
#include "VesselGeometryStruct.hlsl"
#include "VesselPathStruct.hlsl"
#include "WallReflection.hlsl"

#define GROUP_SIZE_X 64
#define GROUP_SIZE_Y 1
#define GROUP_SIZE_Z 1

// Define buffers for storing the vertices, normals and texture coordinates of the mesh.
RWByteAddressBuffer _VertexBuffer;
RWByteAddressBuffer _NormalBuffer;
RWByteAddressBuffer _TexcoordBuffer;

// Mesh properties.
int _QuadCount, _XQuadCount, _ZQuadCount, _XOrigin, _ZOrigin;
float _Time, _XStep, _ZStep;

// Number of vessels.
int _NumVessels;

// Vessel geometry properties.
StructuredBuffer<float3> _VesselCoord;
int2 _VesselNxNy;

// Vessel path properties.
StructuredBuffer<float2> _VesselPathCoord;
StructuredBuffer<float> _VesselPathTime, _VesselPathHeading, _VesselPathDepth;
int _VesselPathNumPoints;

// Stationary points for use in computation of ship waves in finite water depth.
// Pre-calculated to increase performance.
StructuredBuffer<float2> _FiniteWaterStationaryPoints;
float4 _FnhInfo, _HInfo, _AlphaInfo;

// Wall properties
StructuredBuffer<float4> _Walls;
int _NumWalls;

float ComputeElevation(Vertex v, VesselGeometryStruct vgs, VesselPathStruct vps)
{
    // Compute wave elevation.
    
    float elevation = 0.0;  // Initialize wave elevation.
    for (int i = 0; i < _NumVessels; i++)   // For each vessel.
    {
        elevation += ComputeShipWaveElevationGlobal(v.position.xz, i, vgs, vps, false, _Walls, 0, _NumWalls);   // Add contribution before reflection from walls.
        elevation += ComputeWallReflection(v.position.xz, i, vgs, vps, _Walls, _NumWalls);  // Add contribution after reflection from walls.
    }
    // Return total elevation.
    return elevation;  
}


[numthreads(GROUP_SIZE_X, GROUP_SIZE_Y, GROUP_SIZE_Z)]
void ComputeWaterSurfaceKernel(uint3 threadID : SV_DispatchThreadID)
{
    // Initialize structs.
    VesselGeometryStruct vesselGeometryInfo = InitializeVesselGeometry(_VesselCoord, _VesselNxNy);
    VesselPathStruct vesselPathInfo = InitializeVesselPath(_VesselPathNumPoints, _VesselPathCoord, _VesselPathTime, _VesselPathHeading, _VesselPathDepth,
        _FiniteWaterStationaryPoints, _FnhInfo, _HInfo, _AlphaInfo);

    uint id = threadID.x + threadID.y * GROUP_SIZE_X;
    if ((int) id >= _QuadCount)
        return;
    uint idx1 = id * 6;
    uint idx2 = id * 6 + 1;
    uint idx3 = id * 6 + 2;
    uint idx4 = id * 6 + 3;
    uint idx5 = id * 6 + 4;
    uint idx6 = id * 6 + 5;

    // Generate quad.
    Vertex v1 = GenerateQuad(idx1, _XQuadCount, _XStep, _ZStep, _XOrigin, _ZOrigin);
    Vertex v2 = GenerateQuad(idx2, _XQuadCount, _XStep, _ZStep, _XOrigin, _ZOrigin);
    Vertex v3 = GenerateQuad(idx3, _XQuadCount, _XStep, _ZStep, _XOrigin, _ZOrigin);
    Vertex v6 = GenerateQuad(idx6, _XQuadCount, _XStep, _ZStep, _XOrigin, _ZOrigin);

    // Compute surface elevation.
    v1.position.y = ComputeElevation(v1, vesselGeometryInfo, vesselPathInfo);
    v2.position.y = ComputeElevation(v2, vesselGeometryInfo, vesselPathInfo);
    v3.position.y = ComputeElevation(v3, vesselGeometryInfo, vesselPathInfo);
    v6.position.y = ComputeElevation(v6, vesselGeometryInfo, vesselPathInfo);

    // ----- Triangular mesh from quads -----
    // Quads are generated from the 'id' in the order displayed below.
    //    p3, p5        p6
    //       ___________
    //      |\          |
    //      |  \        |
    //      |    \      |
    //      |      \    |
    //      |        \  |
    //      |__________\|
    //     p1           p2, p4
    //
    // Hence triangles are made as (p1, p2, p3) and (p4, p5, p6),
    // which is equivalent to      (p1, p2, p3) and (p2, p3, p6),
    // avoiding the computation of p4 and p5.

    StoreTriangle(idx1, idx2, idx3, v1, v3, v2, _VertexBuffer, _NormalBuffer, _TexcoordBuffer);
    StoreTriangle(idx4, idx5, idx6, v2, v3, v6, _VertexBuffer, _NormalBuffer, _TexcoordBuffer);
}

